"""add tables for chainlit data layer

Revision ID: a7cb40f2e792
Revises: 7f0939973891
Create Date: 2025-03-17 18:31:28.054040

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a7cb40f2e792"
down_revision = "7f0939973891"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "User",
        sa.Column(
            "createdAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("identifier", sa.Text(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("User_pkey")),
        sa.UniqueConstraint("identifier", name=op.f("User_identifier_uniq")),
    )
    op.create_table(
        "Thread",
        sa.Column(
            "createdAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deletedAt", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("userId", sa.UUID(), nullable=True),
        sa.Column("tags", sa.ARRAY(sa.Text()), server_default="{}", nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["userId"], ["User.id"], name=op.f("Thread_userId_User_fkey"), ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("Thread_pkey")),
    )
    op.create_table(
        "Step",
        sa.Column(
            "createdAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("parentId", sa.UUID(), nullable=True),
        sa.Column("threadId", sa.UUID(), nullable=True),
        sa.Column("metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("input", sa.Text(), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("output", sa.Text(), nullable=True),
        sa.Column(
            "type",
            sa.Enum(
                "assistant_message",
                "embedding",
                "llm",
                "retrieval",
                "rerank",
                "run",
                "system_message",
                "tool",
                "undefined",
                "user_message",
                name="steptype",
            ),
            nullable=False,
        ),
        sa.Column("showInput", sa.Text(), server_default="json", nullable=False),
        sa.Column("isError", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("startTime", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("endTime", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["parentId"], ["Step.id"], name=op.f("Step_parentId_Step_fkey"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["threadId"], ["Thread.id"], name=op.f("Step_threadId_Thread_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("Step_pkey")),
    )
    op.create_table(
        "Element",
        sa.Column(
            "createdAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("threadId", sa.UUID(), nullable=True),
        sa.Column("stepId", sa.UUID(), nullable=False),
        sa.Column("metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("mime", sa.Text(), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("objectKey", sa.Text(), nullable=True),
        sa.Column("url", sa.Text(), nullable=True),
        sa.Column("chainlitKey", sa.Text(), nullable=True),
        sa.Column("props", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("display", sa.Text(), nullable=True),
        sa.Column("size", sa.Text(), nullable=True),
        sa.Column("language", sa.Text(), nullable=True),
        sa.Column("page", sa.Integer(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["stepId"], ["Step.id"], name=op.f("Element_stepId_Step_fkey"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["threadId"],
            ["Thread.id"],
            name=op.f("Element_threadId_Thread_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("Element_pkey")),
    )
    op.create_table(
        "Feedback",
        sa.Column(
            "createdAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("step_id", sa.UUID(), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["step_id"], ["Step.id"], name=op.f("Feedback_step_id_Step_fkey"), ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("Feedback_pkey")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("Feedback")
    op.drop_table("Element")
    op.drop_table("Step")
    op.drop_table("Thread")
    op.drop_table("User")
    # ### end Alembic commands ###

    # remove steptype datatype
    op.execute("DROP TYPE IF EXISTS steptype")
