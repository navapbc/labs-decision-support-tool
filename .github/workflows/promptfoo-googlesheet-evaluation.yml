name: 'Prompt Evaluation'

on:
  pull_request:
    branches:
      - main
    paths:
      - 'app/src/chat_api.py'
      - 'app/src/chat_engine.py'
      - 'app/src/generate.py'
      - 'app/promptfooconfig.ci.yaml'
      - 'docs/app/evaluation/generateUniqueId.js'

jobs:
  evaluate:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    env:
      GOOGLE_SHEET_INPUT_URL: ${{ secrets.GOOGLE_SHEET_INPUT_URL }}
      GOOGLE_SHEET_OUTPUT_URL: ${{ secrets.GOOGLE_SHEET_OUTPUT_URL }}
      PROMPTFOO_API_KEY: ${{ secrets.PROMPTFOO_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set up Google Cloud credentials
        run: |
          # Ensure the JSON is properly formatted without escaping issues
          echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > "/tmp/gcp-creds.json"
          # Verify JSON is valid without printing content
          jq -e . "/tmp/gcp-creds.json" > /dev/null || echo "Warning: Invalid JSON format in credentials"
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-creds.json" >> "${GITHUB_ENV}"

      - name: Install promptfoo and googleapis
        run: |
          npm install -g promptfoo
          npm install -g googleapis
          npm install -g @actions/core @actions/github

      - name: Set up promptfoo cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/promptfoo
          key: ${{ runner.os }}-promptfoo-v1-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-promptfoo-v1-

      - name: Create unique ID generator
        run: |
          cat > /tmp/generateUniqueId.js << 'EOF'
          module.exports = function (varName, prompt, otherVars) {
            // Generate a unique ID using timestamp and a random component
            const uniqueId = 'promptfoo-eval-test-' + Date.now().toString() + '-' + Math.random().toString(36).substring(2, 9);
            return {
              output: uniqueId
            };
          };
          EOF

      - name: Authenticate with Promptfoo
        if: env.PROMPTFOO_API_KEY != ''
        run: |
          # Authenticate with Promptfoo using the login command
          promptfoo auth login --host https://api.promptfoo.app --api-key "${PROMPTFOO_API_KEY}"

      - name: Process config file
        run: |
          # Create a temporary copy of the config file
          cp app/promptfooconfig.ci.yaml /tmp/promptfooconfig.processed.yaml
          
          # Replace placeholders with actual secret values
          sed -i "s|GOOGLE_SHEET_INPUT_URL|${{ secrets.GOOGLE_SHEET_INPUT_URL }}|g" /tmp/promptfooconfig.processed.yaml
          sed -i "s|GOOGLE_SHEET_OUTPUT_URL|${{ secrets.GOOGLE_SHEET_OUTPUT_URL }}|g" /tmp/promptfooconfig.processed.yaml
          
          # Debug output (redacting sensitive parts)
          echo "Config file processed. Validating structure..."
          grep -v "GOOGLE_SHEET" /tmp/promptfooconfig.processed.yaml | grep -i "url\|path"

      - name: Run promptfoo evaluation
        id: eval
        run: |
          # Add a JSON output file in addition to Google Sheets output
          OUTPUT_JSON_FILE="/tmp/promptfoo-output.json"
          
          # Run evaluation with share flag to get shareable URL, using the processed config
          promptfoo eval --config "/tmp/promptfooconfig.processed.yaml" --share --output "${OUTPUT_JSON_FILE}"
          
          # Extract evaluation ID and shareable URL if available
          if [ -f "${OUTPUT_JSON_FILE}" ]; then
            # Print the output file content for debugging (fixing 'useless cat')
            echo "Output JSON file content:"
            grep -v "sensitive" "${OUTPUT_JSON_FILE}"
            
            EVAL_ID=$(jq -r '.evaluationId // "unknown"' "${OUTPUT_JSON_FILE}")
            SHARE_URL=$(jq -r '.shareableUrl // ""' "${OUTPUT_JSON_FILE}")
            
            # Try to share the results if not already shared
            if [ -z "${SHARE_URL}" ] && [ "${EVAL_ID}" != "unknown" ] && [ "${EVAL_ID}" != "null" ]; then
              echo "No shareable URL found, attempting to share evaluation..."
              SHARE_RESULT=$(promptfoo share --id "${EVAL_ID}" --json || echo '{}')
              SHARE_URL=$(echo "${SHARE_RESULT}" | jq -r '.shareableUrl // ""')
              echo "Share result: ${SHARE_URL}"
            fi
            
            # Save as outputs
            echo "eval_id=${EVAL_ID}" >> "${GITHUB_OUTPUT}"
            echo "share_url=${SHARE_URL}" >> "${GITHUB_OUTPUT}"
            
            # Print the share URL for debugging
            echo "Shareable URL: ${SHARE_URL}"
          else
            echo "No output JSON file was generated"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Create PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const evalId = '${{ steps.eval.outputs.eval_id }}';
            const shareUrl = '${{ steps.eval.outputs.share_url }}';
            const googleSheetUrl = '${{ env.GOOGLE_SHEET_OUTPUT_URL }}';
            
            // Get the test results from the previous step
            const fs = require('fs');
            let stats = { successes: 0, failures: 0, total: 0 };
            
            try {
              if (fs.existsSync('/tmp/promptfoo-output.json')) {
                const outputData = JSON.parse(fs.readFileSync('/tmp/promptfoo-output.json', 'utf8'));
                if (outputData.results && outputData.results.stats) {
                  stats = outputData.results.stats;
                }
              }
            } catch (error) {
              console.error('Error parsing output file:', error);
            }
            
            // Create the comment body
            let body = `## Promptfoo Evaluation Results
            
            | Success | Failure | Total | Pass Rate |
            |---------|---------|-------|-----------|
            | ${stats.successes} | ${stats.failures} | ${stats.total || stats.successes + stats.failures} | ${((stats.successes / (stats.total || stats.successes + stats.failures)) * 100).toFixed(2)}% |
            
            `;
            
            // Add Google Sheet link
            body += `[View detailed results in Google Sheets](${googleSheetUrl})\n\n`;
            
            // Add shareable link if available, matching the format in the TS example
            if (shareUrl && shareUrl.length > 0) {
              body += `**» [View eval results](${shareUrl}) «**\n`;
            } else if (evalId && evalId !== 'null' && evalId !== 'unknown') {
              body += `Run \`promptfoo view --id ${evalId}\` locally to view interactive results\n`;
            } else {
              body += `**» View eval results in CI console «**\n`;
            }
            
            // Post comment to PR
            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            
            console.log(`Created comment: ${comment.html_url}`);